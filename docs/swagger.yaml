basePath: /
definitions:
  models.Category:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.CategoryDto:
    properties:
      name:
        type: string
    type: object
  models.Error:
    properties:
      message:
        type: string
    type: object
  models.Item:
    properties:
      category_id:
        type: integer
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: integer
      quantity:
        type: integer
      user_id:
        type: integer
    type: object
  models.ItemDto:
    properties:
      category_id:
        type: integer
      description:
        type: string
      name:
        type: string
      price:
        type: integer
      quantity:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a movie server. You can visit the GitHub repository at https://github.com/olusola/inventory
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Inventory API
  version: "1.0"
paths:
  /api/v1/categories:
    get:
      description: Get all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get all categories
      tags:
      - category
    post:
      consumes:
      - application/json
      description: Create a new category
      parameters:
      - description: Category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.CategoryDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Create a new category
      tags:
      - category
  /api/v1/categories/{id}:
    delete:
      description: Delete a category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Delete a category
      tags:
      - category
    put:
      consumes:
      - application/json
      description: Update a category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.CategoryDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Update a category
      tags:
      - category
  /api/v1/categories/{id}/items:
    get:
      description: Get category items
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Item'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get category items
      tags:
      - category
  /api/v1/item/{id}:
    get:
      description: Get item by id
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Item'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get item by id
      tags:
      - items
  /api/v1/items:
    get:
      description: Get all items
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.Item'
              type: array
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get all items
      tags:
      - items
    post:
      consumes:
      - application/json
      description: Create item
      parameters:
      - description: Item
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.ItemDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Item'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
      summary: Create item
      tags:
      - items
  /api/v1/items/{id}:
    delete:
      consumes:
      - application/json
      description: Delete item
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Item'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
      summary: Delete item
      tags:
      - items
    put:
      consumes:
      - application/json
      description: Update item
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Item
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.ItemDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Item'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
      summary: Update item
      tags:
      - items
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
